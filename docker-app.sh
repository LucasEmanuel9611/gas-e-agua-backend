#!/bin/bash

# Script para gerenciar a aplica√ß√£o dockerizada
# Uso: ./docker-app.sh [comando]

set -e

COMPOSE_FILE="docker-compose.app.yml"
ENV_FILE="env.docker.example"

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fun√ß√£o para mostrar ajuda
show_help() {
    echo -e "${BLUE}üê≥ Gas e √Ågua - Docker App Manager${NC}"
    echo ""
    echo "Comandos dispon√≠veis:"
    echo "  start     - Iniciar aplica√ß√£o (build + up)"
    echo "  stop      - Parar aplica√ß√£o"
    echo "  restart   - Reiniciar aplica√ß√£o"
    echo "  build     - Fazer build da imagem"
    echo "  logs      - Ver logs da aplica√ß√£o"
    echo "  logs-db   - Ver logs do MySQL"
    echo "  status    - Status dos containers"
    echo "  migrate   - Executar migra√ß√µes do Prisma"
    echo "  shell     - Acessar shell do container da app"
    echo "  db-shell  - Acessar MySQL"
    echo "  clean     - Limpar containers e volumes"
    echo "  help      - Mostrar esta ajuda"
    echo ""
    echo "Exemplos:"
    echo "  ./docker-app.sh start"
    echo "  ./docker-app.sh logs -f"
    echo "  ./docker-app.sh migrate"
}

# Verificar se Docker est√° instalado
check_docker() {
    if ! command -v docker &> /dev/null; then
        echo -e "${RED}‚ùå Docker n√£o est√° instalado!${NC}"
        exit 1
    fi
    
    if ! command -v docker compose &> /dev/null; then
        echo -e "${RED}‚ùå Docker Compose n√£o est√° instalado!${NC}"
        exit 1
    fi
}

# Verificar se arquivo .env existe
check_env() {
    if [ ! -f ".env" ]; then
        echo -e "${YELLOW}‚ö†Ô∏è  Arquivo .env n√£o encontrado!${NC}"
        echo -e "${BLUE}üí° Copiando env.docker.example para .env...${NC}"
        cp env.docker.example .env
        echo -e "${GREEN}‚úÖ Arquivo .env criado! Edite as vari√°veis se necess√°rio.${NC}"
    fi
}

# Fun√ß√£o para iniciar
start_app() {
    echo -e "${BLUE}üöÄ Iniciando aplica√ß√£o...${NC}"
    check_docker
    check_env
    
    echo -e "${YELLOW}üî® Fazendo build da imagem...${NC}"
    docker compose -f $COMPOSE_FILE build --no-cache
    
    echo -e "${YELLOW}‚¨ÜÔ∏è  Subindo containers...${NC}"
    docker compose -f $COMPOSE_FILE up -d
    
    echo -e "${GREEN}‚úÖ Aplica√ß√£o iniciada!${NC}"
    echo -e "${BLUE}üìä Status:${NC}"
    docker compose -f $COMPOSE_FILE ps
    
    echo ""
    echo -e "${GREEN}üåê Aplica√ß√£o dispon√≠vel em:${NC}"
    echo -e "   ‚Ä¢ API: http://localhost:3333"
    echo -e "   ‚Ä¢ Health: http://localhost:3333/health"
    echo -e "   ‚Ä¢ Metrics: http://localhost:3333/metrics"
    echo ""
    echo -e "${BLUE}üí° Para ver logs: ./docker-app.sh logs${NC}"
}

# Fun√ß√£o para parar
stop_app() {
    echo -e "${YELLOW}üõë Parando aplica√ß√£o...${NC}"
    docker compose -f $COMPOSE_FILE down
    echo -e "${GREEN}‚úÖ Aplica√ß√£o parada!${NC}"
}

# Fun√ß√£o para reiniciar
restart_app() {
    echo -e "${YELLOW}üîÑ Reiniciando aplica√ß√£o...${NC}"
    stop_app
    start_app
}

# Fun√ß√£o para build
build_app() {
    echo -e "${BLUE}üî® Fazendo build da aplica√ß√£o...${NC}"
    docker compose -f $COMPOSE_FILE build --no-cache
    echo -e "${GREEN}‚úÖ Build conclu√≠do!${NC}"
}

# Fun√ß√£o para logs
show_logs() {
    echo -e "${BLUE}üìã Logs da aplica√ß√£o:${NC}"
    docker compose -f $COMPOSE_FILE logs "$@"
}

# Fun√ß√£o para logs do banco
show_db_logs() {
    echo -e "${BLUE}üìã Logs do MySQL:${NC}"
    docker compose -f $COMPOSE_FILE logs mysql "$@"
}

# Fun√ß√£o para status
show_status() {
    echo -e "${BLUE}üìä Status dos containers:${NC}"
    docker compose -f $COMPOSE_FILE ps
    echo ""
    echo -e "${BLUE}üíæ Uso de recursos:${NC}"
    docker stats --no-stream --format "table {{.Container}}\t{{.CPUPerc}}\t{{.MemUsage}}\t{{.NetIO}}\t{{.BlockIO}}"
}

# Fun√ß√£o para migrar
migrate_db() {
    echo -e "${BLUE}üîÑ Executando migra√ß√µes...${NC}"
    docker compose -f $COMPOSE_FILE exec app /bin/bash -c "npx prisma db push"
    echo -e "${GREEN}‚úÖ Migra√ß√µes executadas!${NC}"
}

# Fun√ß√£o para shell da app
app_shell() {
    echo -e "${BLUE}üêö Acessando shell da aplica√ß√£o...${NC}"
    docker compose -f $COMPOSE_FILE exec app /bin/sh
}

# Fun√ß√£o para shell do banco
db_shell() {
    echo -e "${BLUE}üêö Acessando MySQL...${NC}"
    docker compose -f $COMPOSE_FILE exec mysql mysql -u gas_e_agua -p gas_e_agua
}

# Fun√ß√£o para limpar
clean_all() {
    echo -e "${RED}üßπ Limpando containers e volumes...${NC}"
    read -p "Tem certeza? Isso vai apagar todos os dados! (y/N): " -n 1 -r
    echo
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        docker compose -f $COMPOSE_FILE down -v --remove-orphans
        docker system prune -f
        echo -e "${GREEN}‚úÖ Limpeza conclu√≠da!${NC}"
    else
        echo -e "${YELLOW}‚ùå Opera√ß√£o cancelada.${NC}"
    fi
}

# Main
case "${1:-help}" in
    start)
        start_app
        ;;
    stop)
        stop_app
        ;;
    restart)
        restart_app
        ;;
    build)
        build_app
        ;;
    logs)
        shift
        show_logs "$@"
        ;;
    logs-db)
        shift
        show_db_logs "$@"
        ;;
    status)
        show_status
        ;;
    migrate)
        migrate_db
        ;;
    shell)
        app_shell
        ;;
    db-shell)
        db_shell
        ;;
    clean)
        clean_all
        ;;
    help|--help|-h)
        show_help
        ;;
    *)
        echo -e "${RED}‚ùå Comando desconhecido: $1${NC}"
        echo ""
        show_help
        exit 1
        ;;
esac
