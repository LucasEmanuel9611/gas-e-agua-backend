generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
  // shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

enum UserRole {
  USER
  ADMIN
  DELIVERY_MAN
}

enum TransactionType {
  PAYMENT
  INTEREST
  CREATE
}

model User {
  id                 Int                 @id @default(autoincrement())
  username           String
  email              String
  password           String
  role               UserRole            @default(USER)
  telephone          String
  created_at         DateTime            @default(now())
  updated_at         DateTime            @updatedAt
  address            Address?
  notificationTokens NotificationToken[]
  orders             Order[]
}

model NotificationToken {
  id      Int    @id @default(autoincrement())
  token   String
  user_id Int
  user    User   @relation(fields: [user_id], references: [id])

  @@index([user_id], map: "NotificationToken_user_id_fkey")
}

model Address {
  id         Int      @id @default(autoincrement())
  street     String?
  reference  String
  local      String
  number     String?
  user_id    Int      @unique
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  user       User     @relation(fields: [user_id], references: [id])
  Order      Order[]
}

model Order {
  id               Int           @id @default(autoincrement())
  user_id          Int
  gasAmount        Int
  waterAmount      Int
  address_id       Int
  total            Float
  status           String
  payment_state    String        @default("PENDENTE")
  created_at       DateTime      @default(now())
  updated_at       DateTime      @updatedAt
  address          Address       @relation(fields: [address_id], references: [id])
  user             User          @relation(fields: [user_id], references: [id])
  interest_allowed Boolean       @default(true)
  payments         Transaction[]

  @@index([address_id], map: "Order_address_id_fkey")
  @@index([user_id], map: "Order_user_id_fkey")
}

model Transaction {
  id             Int             @id @default(autoincrement())
  order_id       Int
  type           TransactionType
  amount         Float
  old_value      Float
  new_value      Float
  payment_method String?
  notes          String?
  created_at     DateTime        @default(now())
  updated_at     DateTime        @updatedAt
  order          Order           @relation(fields: [order_id], references: [id])

  @@index([order_id], map: "Transaction_order_id_fkey")
}

model Stock {
  id         Int      @id @default(autoincrement())
  value      Float
  name       String
  quantity   Int
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}
