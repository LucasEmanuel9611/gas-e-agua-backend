name: Deploy to VPS (PRD)

on:
  workflow_run:
    workflows: ["üèóÔ∏è Build and Push to GHCR"]
    types:
      - completed
    branches:
      - master
  workflow_dispatch:

concurrency:
  group: vps-deploy-prd
  cancel-in-progress: false

jobs:
  deploy:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch' }}

    steps:
      # Etapa 1: Fazer checkout (clonar) o c√≥digo do reposit√≥rio
      - name: Checkout code
        uses: actions/checkout@v4

      # Etapa 2: Configurar SSH para conectar na VPS
      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.VPS_HOST }} >> ~/.ssh/known_hosts

      - name: Sync configuration files to VPS
        run: |
          echo "üì¶ Syncing docker-compose and scripts to VPS..."

          # Sync docker-compose files
          scp -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no \
            docker-compose.app.yml \
            docker-compose.monitoring-prd.yml \
            ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }}:/home/deploy/gas-e-agua-backend/

          # Sync essential scripts
          scp -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no \
            scripts/deploy/deploy.sh \
            scripts/deploy/backup-db.sh \
            scripts/deploy/rollback.sh \
            scripts/deploy/cleanup-old-versions.sh \
            ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }}:/home/deploy/gas-e-agua-backend/scripts/deploy/

          # Sync Prisma files (for migrations)
          scp -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no -r \
            prisma \
            ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }}:/home/deploy/gas-e-agua-backend/

          # Set permissions
          ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} \
            "chmod +x /home/deploy/gas-e-agua-backend/scripts/deploy/*.sh"

          echo "‚úÖ Configuration synced"

      # Etapa 3: Criar backup do banco ANTES do deploy (CR√çTICO em produ√ß√£o)
      - name: Backup database
        uses: ./.github/actions/backup
        with:
          environment: prd
          ssh-key: ${{ secrets.SSH_PRIVATE_KEY }}
          vps-host: ${{ secrets.VPS_HOST }}
          vps-user: ${{ secrets.VPS_USER }}

      # Etapa 4: Deploy em PRODU√á√ÉO (build, migrations, containers)
      - name: Deploy application
        id: deploy
        run: |
          ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} << 'EOF'
            set -e
            cd /home/deploy/gas-e-agua-backend
            
            # Login no GHCR
            echo "${{ secrets.GHCR_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
            
            # Definir vari√°veis de GHCR
            export DOCKER_IMAGE="ghcr.io/${{ github.repository }}"
            export IMAGE_TAG="master-latest"
            
            # Injetar secrets da aplica√ß√£o (via GitHub Secrets)
            export MYSQL_ROOT_PASSWORD="${{ secrets.MYSQL_ROOT_PASSWORD_PRD }}"
            export MYSQL_DATABASE="${{ secrets.MYSQL_DATABASE_PRD }}"
            export MYSQL_USER="${{ secrets.MYSQL_USER_PRD }}"
            export MYSQL_PASSWORD="${{ secrets.MYSQL_PASSWORD_PRD }}"
            export JWT_SECRET="${{ secrets.JWT_SECRET_PRD }}"
            export GRAFANA_ADMIN_PASSWORD="${{ secrets.GRAFANA_ADMIN_PASSWORD_PRD }}"
            export GRAFANA_SECRET_KEY="${{ secrets.GRAFANA_SECRET_KEY_PRD }}"
            
            # Executar deploy script
            bash ./scripts/deploy/deploy.sh prd
          EOF

      # Etapa 5: Verificar sa√∫de da aplica√ß√£o (10 tentativas em produ√ß√£o)
      - name: Health check
        uses: ./.github/actions/health-check
        with:
          environment: prd
          ssh-key: ${{ secrets.SSH_PRIVATE_KEY }}
          vps-host: ${{ secrets.VPS_HOST }}
          vps-user: ${{ secrets.VPS_USER }}

      # Etapa 6: Notificar sucesso (Discord + Slack)
      - name: Notify success
        if: success()
        uses: ./.github/actions/notify
        with:
          status: success
          environment: prd
          message: "Deploy completed successfully"
          discord-webhook: ${{ secrets.DISCORD_WEBHOOK_URL }}

      # Etapa 7: Notificar FALHA CR√çTICA em produ√ß√£o (Discord + Slack)
      - name: Notify failure
        if: failure()
        uses: ./.github/actions/notify
        with:
          status: failure
          environment: prd
          message: "Deploy failed - check logs for details"
          discord-webhook: ${{ secrets.DISCORD_WEBHOOK_URL }}
